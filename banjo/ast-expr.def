// Copyright (c) 2015-2016 Andrew Sutton
// All rights reserved

// Literals and primary expressions
define_node(Void_expr)
define_node(Boolean_expr)
define_node(Integer_expr)
define_node(Real_expr)
define_node(Tuple_expr)

// References to declared entities
define_node(Decl_ref)
define_node(Overload_ref)
define_node(Member_ref)
define_node(Scoped_ref)

// Arithmetic expressions
define_node(Add_expr)
define_node(Sub_expr)
define_node(Mul_expr)
define_node(Div_expr)
define_node(Rem_expr)
define_node(Neg_expr)
define_node(Pos_expr)

// Bitwise expressions
define_node(Bit_or_expr)
define_node(Bit_xor_expr)
define_node(Bit_and_expr)
define_node(Bit_lsh_expr)
define_node(Bit_rsh_expr)
define_node(Bit_not_expr)

// Relational expressions
define_node(Eq_expr)
define_node(Ne_expr)
define_node(Lt_expr)
define_node(Gt_expr)
define_node(Le_expr)
define_node(Ge_expr)
define_node(Cmp_expr)

// Logical expressions
define_node(And_expr)
define_node(Or_expr)
define_node(Not_expr)

// Assignment
define_node(Assign_expr)

// Function call
// TODO: Specialize call expression types for method call, virtual 
// call, etc. That would make it easier to specialize behaviors in
// evaluation, code gen.
define_node(Call_expr)

// Conversions
define_node(Value_conv)
define_node(Qualification_conv)
define_node(Boolean_conv)
define_node(Integer_conv)
define_node(Float_conv)
define_node(Numeric_conv)
define_node(Dependent_conv)
define_node(Ellipsis_conv)

// Initialization
define_node(Trivial_init)
define_node(Copy_init)
define_node(Bind_init)
define_node(Direct_init)
define_node(Aggregate_init)

// Misc.
define_node(Requires_expr)
define_node(Synthetic_expr)
define_node(Unparsed_expr)
